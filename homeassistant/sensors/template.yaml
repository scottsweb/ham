platform: template
sensors:

  placeholder:
    value_template: " "

  day:
    entity_id: sensor.date
    value_template: >
      {% set days = ["Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag", "Söndag"] %}
      {{ days[now().weekday()] }}

  date_se:
    value_template: >
      {% set months = ["Januari", "Februari", "Mars", "April", "Maj", "Juni",
      "Juli", "Augusti", "September", "Oktober", "November", "December"] %}
      {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
      {{ months[now().month-1] }}

  washing_countdown:
    entity_id: sensor.time
    friendly_name: Washing Countdown
    value_template: >-
      {% if state_attr('calendar.washing', 'start_time') ==  null or
        state_attr('calendar.washing', 'start_time') == None %}
      {% else %}
        {% set calendar_washingid = state_attr('calendar.washing', 'start_time') %}
        {% set now = now() %}
        {% set dag = strptime(calendar_washingid, "%Y-%m-%d %H:%M:%S").strftime("%A")
        | replace('Monday', 'Måndag') | replace('Tuesday', 'Tisdag')
        | replace('Wednesday', 'Onsdag') | replace('Thursday', 'Torsdag')
        | replace('Friday', 'Fredag') | replace('Saturday', 'Lördag') | replace('Sunday', 'Söndag') %}
        {% set tid = as_timestamp(calendar_washingid) | timestamp_custom('%H:%M') %}
        {% set sub_timer = as_timestamp(calendar_washingid) | timestamp_custom('%H') | int / 24 %}
        {% set count = (as_timestamp(calendar_washingid) - as_timestamp(now)) / 86400 - sub_timer %}
        {% if count <= -1.0 %}
          Set a new washing time
        {% elif count <= 0.0 %}
          {{'\U0001F4A6'}} Washing today at {{ tid }}.
        {% elif count <= 1.0 %}
          Washing tomorrow at {{ tid }}.
        {% elif count <= 2.0 %}
          Washing the day after tomorrow at {{ tid }}.
        {% else %}
          Washing in {{ (count + sub_timer) | round }} days: {{ dag }} at {{ tid }}.
        {% endif %}
      {% endif %}

  # people
  scott_last_changed:
    entity_id: sensor.time
    value_template: >-
      {%- set time = (as_timestamp(now()) -
      as_timestamp(states.person.scott.last_changed)) | int %}
      {%- set minutes = ((time % 3600) // 60) %}
      {%- set hours = ((time % 86400) // 3600) %}
      {%- set days = (time // 86400) %}
      {% if time <= 60 %} 0m
      {% elif time <= 3600 %} {{ minutes }}m
      {% elif time <= 86400 %} {{ hours }}h
      {% elif time > 86400 %} {{ days }}d
      {% endif %}

  gemma_last_changed:
    entity_id: sensor.time
    value_template: >-
      {%- set time = (as_timestamp(now()) -
      as_timestamp(states.person.gemma.last_changed)) | int %}
      {%- set minutes = ((time % 3600) // 60) %}
      {%- set hours = ((time % 86400) // 3600) %}
      {%- set days = (time // 86400) %}
      {% if time <= 60 %} 0m
      {% elif time <= 3600 %} {{ minutes }}m
      {% elif time <= 86400 %} {{ hours }}h
      {% elif time > 86400 %} {{ days }}d
      {% endif %}

  scott_last_changed_h:
    entity_id: sensor.time
    value_template: >-
      {%- set time = (as_timestamp(now()) -
      as_timestamp(states.person.scott.last_changed)) | int %}
      {%- set minutes = ((time % 3600) // 60) %}
      {%- set hours = ((time % 86400) // 3600) %}
      {%- set days = (time // 86400) %}
      {% if time <= 60 %} mindre än 1m
      {% elif time <= 3600 %} {{ minutes }}m
      {% elif time <= 86400 and minutes == 0 %} {{ hours }}h
      {% elif time <= 86400 %} {{ hours }}h och {{ minutes }}m
      {% elif time > 86400 %} {{ days }}d
      {% endif %}

  gemma_last_changed_h:
    entity_id: sensor.time
    value_template: >-
      {%- set time = (as_timestamp(now()) -
      as_timestamp(states.person.gemma.last_changed)) | int %}
      {%- set minutes = ((time % 3600) // 60) %}
      {%- set hours = ((time % 86400) // 3600) %}
      {%- set days = (time // 86400) %}
      {% if time <= 60 %} mindre än 1m
      {% elif time <= 3600 %} {{ minutes }}m
      {% elif time <= 86400 and minutes == 0 %} {{ hours }}h
      {% elif time <= 86400 %} {{ hours }}h och {{ minutes }}m
      {% elif time > 86400 %} {{ days }}d
      {% endif %}

  # lights
  light_hallway_brightness:
    value_template: >-
      {% if is_state('light.hallway', 'on') %}
      {{ (state_attr('light.hallway', 'brightness') / 2.54) | round }}{% endif %}

  light_lounge_tall_brightness:
    value_template: >-
      {% if is_state('light.lounge_light_tall', 'on') %}
      {{ (state_attr('light.lounge_light_tall', 'brightness') / 2.54) | round }}{% endif %}

  light_lounge_small_brightness:
    value_template: >-
      {% if is_state('light.lounge_light_small', 'on') %}
      {{ (state_attr('light.lounge_light_small', 'brightness') / 2.54) | round }}{% endif %}

  # vacuum
  monk_battery_level:
    friendly_name: Battery
    unit_of_measurement: '%'
    value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_level') }}"
    icon_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_icon') }}"

  monk_state:
    friendly_name: Monk
    value_template: >-
      {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') %}
      Dockad
      {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') %}
      Städar
      {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') %}
      Återvänder
      {% else %}
      {{ states('vacuum.xiaomi_vacuum_cleaner') }}
      {% endif %}
    icon_template: 'mdi:robot-vacuum'

  monk_fan_speed:
    value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'fan_speed') }}"

  monk_filter:
    friendly_name: Filter
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') / 1.5) | round }}"
    icon_template: 'mdi:air-filter'

  monk_brush:
    friendly_name: Brush
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') / 3) | round }}"
    icon_template: 'mdi:broom'

  monk_sensor:
    friendly_name: Sensor
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') / 0.3) | round }}"
    icon_template: 'mdi:leak'

  monk_side_brush:
    friendly_name: Side Brush
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') / 2) | round }}"
    icon_template: 'mdi:brush'

  monk_last_clean:
    entity_id: sensor.time
    friendly_name: Last Clean
    icon_template: 'mdi:clock'
    value_template: >
      {% set clean_stop =
      (as_timestamp(now()) - as_timestamp(state_attr('vacuum.xiaomi_vacuum_cleaner', 'clean_stop') | default(0))) %}
      {% if clean_stop | timestamp_custom("%d") | int-1 == 1 %}{{ clean_stop | timestamp_custom("%d") | int-1}} dag sedan
      {% elif clean_stop | timestamp_custom("%d") | int-1 >= 2 %}{{ clean_stop | timestamp_custom("%d") | int-1}} dagar sedan
      {% elif clean_stop | timestamp_custom("%H") | int-1 == 1 %}{{ clean_stop | timestamp_custom("%H") | int-1}} timme sedan
      {% elif clean_stop | timestamp_custom("%H") | int-1 >= 2 %}{{ clean_stop | timestamp_custom("%H") | int-1}} timmar sedan
      {% elif clean_stop | timestamp_custom("%M")|int == 1 %}{{ clean_stop | timestamp_custom("%M") | int}} minut sedan
      {% elif clean_stop | timestamp_custom("%M")|int >= 2 %}{{ clean_stop | timestamp_custom("%M") | int}} minuter sedan
      {% else %}Minde än 1 minut sedan
      {% endif %}
