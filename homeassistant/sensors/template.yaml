platform: template
sensors:

  placeholder:
    value_template: " "

  day:
    icon_template: mdi:calendar
    value_template: >
      {% set weekday = as_local(states.sensor.date.last_changed).strftime('%w') | int %}
      {% set days = ['Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag', 'Söndag'] %}
      {{ days[weekday - 1] }}

  date_se:
    icon_template: mdi:calendar
    value_template: >
      {% set month = as_local(states.sensor.date.last_changed).strftime('%m') | int %}
      {% set day = as_local(states.sensor.date.last_changed).strftime('%d') | int %}
      {% set months = ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',
      'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'] %}
      {{ day }} {{ months[month - 1] }}

  # vacuum
  monk_battery_level:
    friendly_name: Battery
    unit_of_measurement: '%'
    value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_level') }}"
    icon_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'battery_icon') }}"

  monk_state:
    friendly_name: Monk
    value_template: >-
      {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') %}
      Docked
      {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') %}
      Cleaning
      {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') %}
      Returning
      {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'paused') %}
      Paused
      {% else %}
      {{ states('vacuum.xiaomi_vacuum_cleaner') }}
      {% endif %}
    icon_template: 'mdi:robot-vacuum'

  monk_fan_speed:
    value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner', 'fan_speed') }}"

  monk_filter:
    friendly_name: Filter
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'filter_left') / 1.5) | round }}"
    icon_template: 'mdi:air-filter'

  monk_brush:
    friendly_name: Brush
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'main_brush_left') / 3) | round }}"
    icon_template: 'mdi:broom'

  monk_sensors:
    friendly_name: Sensors
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'sensor_dirty_left') / 0.3) | round }}"
    icon_template: 'mdi:leak'

  monk_side_brush:
    friendly_name: Side Brush
    unit_of_measurement: '%'
    value_template: "{{ (state_attr('vacuum.xiaomi_vacuum_cleaner', 'side_brush_left') / 2) | round }}"
    icon_template: 'mdi:brush'

  monk_last_clean:
    friendly_name: Last Clean
    icon_template: 'mdi:clock'
    value_template: >
      {% set last_cleaned = (as_timestamp(states.sensor.time.last_changed | as_local) -
      as_timestamp(state_attr('vacuum.xiaomi_vacuum_cleaner', 'clean_stop'))) | default(0) %}
      {% if last_cleaned | timestamp_custom('%d') | int -1 == 1 %} {{ last_cleaned | timestamp_custom('%d') | int -1 }} day ago
      {% elif last_cleaned | timestamp_custom('%d') | int -1 >= 2 %} {{ last_cleaned | timestamp_custom('%d') | int -1 }} days ago
      {% elif last_cleaned | timestamp_custom('%H') | int -1 == 1 %} {{ last_cleaned | timestamp_custom('%H') | int -1 }} hour ago
      {% elif last_cleaned | timestamp_custom('%H') | int -1 >= 2 %} {{ last_cleaned | timestamp_custom('%H') | int -1 }} hours ago
      {% elif last_cleaned | timestamp_custom('%M') | int == 1 %} {{ last_cleaned | timestamp_custom('%M') | int }} minute ago
      {% elif last_cleaned | timestamp_custom('%M') | int >= 2 %} {{ last_cleaned | timestamp_custom('%M') | int }} minutes ago
      {% else %} Less than 1 minute ago
      {% endif %}    

  monk_clean_count:
    friendly_name: Cleaning Count
    icon_template: 'mdi:robot-vacuum'
    value_template: "{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.cleaning_count }}"

  # hass
  hass_version_template:
    icon_template: 'mdi:home-assistant'
    friendly_name: Version
    value_template: >-
      {% if states('sensor.hass_version_installed') == states('sensor.hass_version_latest') %}
        {{ states('sensor.hass_version_installed') }}
      {% else %}
        {{ states('sensor.hass_version_installed') }} < {{ states('sensor.hass_version_latest') }}
      {% endif %}

  # media
  media_luther_title_truncate:
    value_template: >
      {% if states('media_player.luther_universal_tv') == null %} {% else %}
        {% if is_state_attr('media_player.luther_universal_tv', 'media_title', 'Nothing playing') %} Inget spelas
        {% elif is_state_attr('media_player.luther_universal_tv', 'media_title', 'No title') %} Ingen titel
        {% elif is_state('media_player.luther_universal_tv', 'idle') %} Viloläge
        {% elif state_attr('media_player.luther_universal_tv', 'media_title') != None %} {{ state_attr('media_player.luther_universal_tv', 'media_title') | truncate(30, True, '...', 0) }}
        {% else %} {{ state_attr('media_player.luther_universal_tv', 'app_name') }}
        {% endif %}
      {% endif %}
